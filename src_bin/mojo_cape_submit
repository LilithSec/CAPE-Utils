#!perl

use Mojolicious::Lite -signatures;
use Sys::Syslog;
use JSON;
use CAPE::Utils;
use File::Slurp;
use Crypt::Digest::SHA256 qw( sha256 sha256_hex sha256_b64 sha256_b64u
	sha256_file sha256_file_hex sha256_file_b64 sha256_file_b64u );
use Crypt::Digest::MD5 qw( md5 md5_hex md5_b64 md5_b64u
	md5_file md5_file_hex md5_file_b64 md5_file_b64u );
use Crypt::Digest::SHA1 qw( sha1 sha1_hex sha1_b64 sha1_b64u
	sha1_file sha1_file_hex sha1_file_b64 sha1_file_b64u );

# two are needed as /* and / don't overlap... so pass it to the_stuff to actually handle it
post '/*' => sub ($c) {
	the_stuff($c);
};
post '/' => sub ($c) {
	the_stuff($c);
};

# sends stuff to syslog
sub log_drek {
	my ( $level, $message ) = @_;

	if ( !defined($level) ) {
		$level = 'info';
	}

	openlog( 'mojo_cape_submit', 'cons,pid', 'daemon' );
	syslog( $level, '%s', $message );
	closelog();
}

# handle it
sub the_stuff {
	my $c         = $_[0];
	my $remote_ip = $c->{tx}{original_remote_address};
	my $apikey    = $c->param('apikey');

	# log the connection
	my $message = 'Started. Remote IP: ' . $remote_ip . '  API key: ';
	if ( defined($apikey) ) {
		$message = $message . $apikey;
	}
	else {
		$message = $message . 'undef';
	}
	log_drek( 'info', $message );

	my $cape_util;
	eval { $cape_util = CAPE::Utils->new(); };
	if ($@) {
		log_drek( 'err', $@ );
		$c->render( text => "Error... please see syslog\n", status => 400, );
		return;
	}

	if ( !-d $cape_util->{config}->{_}->{incoming} ) {
		log_drek( 'err', 'incoming directory, "' . $cape_util->{config}->{_}->{incoming} . '", does not exist' );
		$c->render( text => "Error... please see syslog\n", status => 400, );
		return;
	}

	my $allow_remote;
	eval { $allow_remote = $cape_util->check_remote( apikey => $apikey, ip => $remote_ip ); };
	if ($@) {
		log_drek( 'err', $@ );
		$c->render( text => "Error... please see syslog\n", status => 400, );
		return;
	}
	if ( !$allow_remote ) {
		log_drek( 'info', 'API key or IP not allowed' );
		$c->render( text => "IP not allowed or invalid API key\n", status => 403, );
		return;
	}

	if ( $c->req->is_limit_exceeded ) {
		log_drek( 'err', 'Log size exceeded' );
		$c->render( text => 'File is too big.', status => 400 );
		return;
	}

	my $file = $c->param('filename');
	if ( !$file ) {
		log_drek( 'err', 'No file specified' );
		$c->render( text => 'No file specified', status => 400 );
	}

	#get file info and log it
	my $name = $file->filename;
	my $size = $file->size;
	$name =~ s/\///;
	log_drek( 'info', 'Got File... size=' . $size . ' filename="' . $name . '"' );
	$name = $cape_util->{config}->{_}->{incoming} . '/' . $name;

	# get all the possible additional info
	my %additional_info;
	$additional_info{src_ip}      = $c->param('src_ip');
	$additional_info{src_port}    = $c->param('src_port');
	$additional_info{dest_ip}     = $c->param('dest_ip');
	$additional_info{dest_port}   = $c->param('dest_port');
	$additional_info{proto}       = $c->param('proto');
	$additional_info{app_proto}   = $c->param('app_proto');
	$additional_info{flow_id}     = $c->param('flow_id');
	$additional_info{http_host}   = $c->param('http_host');
	$additional_info{http_url}    = $c->param('http_url');
	$additional_info{http_method} = $c->param('http_method');
	$additional_info{http_proto}  = $c->param('http_proto');
	$additional_info{http_status} = $c->param('http_status');
	$additional_info{http_ctype}  = $c->param('http_ctype');
	$additional_info{http_ua}     = $c->param('http_ua');
	$additional_info{type}        = $c->param('type');
	$additional_info{src_host}    = $c->param('src_host');
	$additional_info{sending_ip}  = $remote_ip;
	$additional_info{apikey}      = $apikey;
	$additional_info{name}        = $name;

	# set the value for anything not defined to undef for the purpose of logging
	foreach my $item ( keys(%additional_info) ) {
		if ( !defined( $additional_info{$item} ) ) {
			$additional_info{$item} = 'undef';
		}
	}

	# log additional info
	log_drek( 'info', 'Source Host: ' . $additional_info{src_host} );
	log_drek( 'info', 'Submission Type: ' . $additional_info{type} );
	log_drek( 'info',
			  'proto='
			. $additional_info{proto}
			. ' src_ip='
			. $additional_info{src_ip}
			. ' src_port='
			. $additional_info{src_port}
			. ' dest_ip='
			. $additional_info{dest_ip}
			. ' dest_port='
			. $additional_info{dest_port}
			. ' flow_id='
			. $additional_info{flow_id} );
	if ( $additional_info{app_proto} eq 'http' ) {
		log_drek( 'info', $additional_info{http_proto} . ' ' . $additional_info{http_host} );
		log_drek( 'info',
			$additional_info{http_method} . ' ' . $additional_info{http_status} . ' ' . $additional_info{http_url} );
		log_drek( 'info', 'useragent: ' . $additional_info{http_ua} );
	}
	else {
		log_drek( 'info', 'App Proto: ' . $additional_info{app_proto} );
	}

	# copy it into place
	$file->move_to($name);
	$additional_info{sha256} = lc( sha256_file_hex($name) );
	log_drek( 'info', 'SHA256: ' . $additional_info{sha256} );
	$additional_info{sha1} = lc( sha1_file_hex($name) );
	log_drek( 'info', 'SHA1: ' . $additional_info{sha1} );
	$additional_info{md5} = lc( md5_file_hex($name) );
	log_drek( 'info', 'MD5: ' . $additional_info{md5} );

	my $results;
	eval { $results = $cape_util->submit( items => [$name], quiet => 1, ); };
	if ($@) {
		log_drek( 'err', $@ );
		$c->render( text => "Error... please see syslog\n", status => 400, );
		return;
	}

	my @submitted = keys( %{$results} );
	if ( !defined( $submitted[0] ) ) {
		log_drek( 'err', 'Submitting "' . $name . '" failed' );
		$c->render( text => "Submission failed\n", status => 400, );
		return;
	}

	log_drek( 'err', 'Submitting "' . $name . '" submitted as ' . $results->{ $submitted[0] } );
	$c->render( text => "Submitted as task ID " . $results->{ $submitted[0] } . "\n", status => 200, );

	if ( !-d $cape_util->{config}->{_}->{incoming_json} ) {
		log_drek( 'err',
			'incoming_json directory, "' . $cape_util->{config}->{_}->{incoming_json} . '", does not exist' );
	}
	else {
		my $data_json      = encode_json( \%additional_info );
		my $data_json_file = $cape_util->{config}->{_}->{incoming_json} . '/' . $results->{ $submitted[0] } . 'json';
		eval { write_file( $data_json_file, $data_json ); } if ($@) {
			log_drek( 'err', 'Failed to write submission data JSON out to "' . $data_json_file . '"... ' . $@ );
		}
		else {
			log_drek( 'info', 'Wrote submission data JSON out to "' . $data_json_file . '"' );
		}
	}

	return;
}

app->start;
